{"ast":null,"code":"var _jsxFileName = \"/Users/akshay/Documents/ML_Project/reddit_tred_tracker/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport DomainInput from './components/DomainInput';\nimport TopicChart from './components/TopicChart';\nimport SentimentChart from './components/SentimentChart';\nimport SubredditChart from './components/SubredditChart';\nimport DashboardSummary from './components/DashboardSummary';\nimport DownloadButtons from './components/DownloadButtons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n  const [subredditData, setSubredditData] = useState(null);\n  const fetchAll = async (domain, days) => {\n    try {\n      const trendRes = await axios.post('http://localhost:8000/trending', {\n        domain\n      });\n      const subredditRes = await axios.get(`http://localhost:8000/subreddit-activity/${domain}`);\n      console.log(\"Trending response:\", trendRes.data);\n      console.log(\"Subreddit activity:\", subredditRes.data);\n      setData(trendRes.data);\n      setSubredditData(subredditRes.data);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Trend Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DomainInput, {\n      onSubmit: fetchAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DashboardSummary, {\n        totalPosts: data.total_posts,\n        totalComments: data.total_comments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TopicChart, {\n        topics: data.topics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SentimentChart, {\n        summary: data.sentiment_summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), subredditData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(SubredditChart, {\n        data: subredditData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), data && /*#__PURE__*/_jsxDEV(DownloadButtons, {\n      posts: data.raw_posts,\n      subredditActivity: subredditData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jbr0V985COQoGkZotmhrHTOrIoQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","DomainInput","TopicChart","SentimentChart","SubredditChart","DashboardSummary","DownloadButtons","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","subredditData","setSubredditData","fetchAll","domain","days","trendRes","post","subredditRes","get","console","log","error","className","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","totalPosts","total_posts","totalComments","total_comments","topics","summary","sentiment_summary","posts","raw_posts","subredditActivity","_c","$RefreshReg$"],"sources":["/Users/akshay/Documents/ML_Project/reddit_tred_tracker/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport DomainInput from './components/DomainInput';\nimport TopicChart from './components/TopicChart';\nimport SentimentChart from './components/SentimentChart';\nimport SubredditChart from './components/SubredditChart';\nimport DashboardSummary from './components/DashboardSummary';\nimport DownloadButtons from './components/DownloadButtons';\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [subredditData, setSubredditData] = useState(null);\n\n  const fetchAll = async (domain, days) => {\n    try {\n      const trendRes = await axios.post('http://localhost:8000/trending', { domain });\n      const subredditRes = await axios.get(`http://localhost:8000/subreddit-activity/${domain}`);\n      console.log(\"Trending response:\", trendRes.data);\n      console.log(\"Subreddit activity:\", subredditRes.data);\n      setData(trendRes.data);\n      setSubredditData(subredditRes.data);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: '20px' }}>\n      <h1>Reddit Trend Tracker</h1>\n      <DomainInput onSubmit={fetchAll} />\n\n      {data && (\n        <>\n          <DashboardSummary\n            totalPosts={data.total_posts}\n            totalComments={data.total_comments}\n          />\n\n          <TopicChart topics={data.topics} />\n          <SentimentChart summary={data.sentiment_summary} />\n        </>\n      )}\n\n      {subredditData && (\n        <>\n          <SubredditChart data={subredditData} />\n        </>\n      )}\n\n      {data && (\n        <DownloadButtons\n          posts={data.raw_posts}\n          subredditActivity={subredditData}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}